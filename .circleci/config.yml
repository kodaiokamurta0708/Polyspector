
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: centos:centos7.5.1804
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          #working_directory: ~/project/App.Tests
          name: library Installation
          command: |
            curl -sL https://rpm.nodesource.com/setup_6.x |  bash -
            yum install -y nodejs 
            node -v 
      - run:
          name: install forever
          command: |
            yum -y install make 
            yum -y install gcc-c++
            npm init -yes
            npm install
            npm install -g forever
      - run:
          name: install rabbitmq
          command: |
            yum install -y epel-release
            yum install -y erlang
            yum install -y rabbitmq-server 
            /usr/sbin/rabbitmq-server -detached
              #systemctl start rabbitmq-server ; systemctl enable rabbitmq-server
              #sed -i -e 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
             #[rabbitmq] edit /etc/selinux/config
             #sed -i "/SELINUX/s/enforcing/disabled/g" /etc/selinux/config
             #install 3rd party lib from npm
      - run:
          name: install VisualizationPlatform
          command: |
            npm install
            npm init -yes
            npm install sqlite3 bower
      - run:
          name: install Python
          command: |
            yum install python3 -y
      - run:
          name:  Python3*
          working_directory: /usr/bin
          command: |
            rm python 
            ln -s python3 ./python
      - run:
          name:  Python setup
          command: |

            python -m pip install requests 
            pip3.6 install bs4
            pip3.6 install pytest
      - run:
          name:  testsrever
          working_directory: /root/project
          command: |
            node server/start.js  PORT=8888 &
            node server/backend/worker_datalist/main.js &
            node  server/backend/worker_csvtsv/main.js &
            sleep 10; pytest test_name.py
#Please Set Data at server/backend/worker_csvtsv/data/hoge.csv
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
#jobs:   
        #test:
          #docker:
            #- image: circleci/python:3.6.3
          #steps:
          #- checkout
          #- run:
          #name: install pytest
          #command: |
            #python3 -m venv venv
            #. venv/bin/activate
            #pip install pytest
            #pip install pytest-cov
            #pip install -e ./.
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test